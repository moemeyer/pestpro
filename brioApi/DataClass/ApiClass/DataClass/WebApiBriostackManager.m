//
// WebApiBriostackManager.h
// Briostack 1.0
//
// Generated by ApiGenerator on Wednesday, March 13, 2024
//

#import "WebApiBriostackManager.h"

@implementation WebApiBriostackManager

@synthesize authorizationName;
@synthesize authorizationPassword;

-(void)useAuthorizationName:(NSString*)name withPassword:(NSString*)password
{
	self.authorizationName = name;
	self.authorizationPassword = password;
}

-(NSString*)base64forData:(NSData*)theData
{
	const uint8_t* input = (const uint8_t*)[theData bytes];
	NSInteger length = [theData length];

	static char table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];
	uint8_t* output = (uint8_t*)data.mutableBytes;

	for (NSInteger i=0; i < length; i += 3) {
		NSInteger value = 0;
		NSInteger j;
		for (j = i; j < (i + 3); j++) {
			value <<= 8;
			if (j < length)
				value |= (0xFF & input[j]);
			}
		NSInteger theIndex = (i / 3) * 4;
		output[theIndex + 0] =                    table[(value >> 18) & 0x3F];
		output[theIndex + 1] =                    table[(value >> 12) & 0x3F];
		output[theIndex + 2] = (i + 1) < length ? table[(value >> 6)  & 0x3F] : '=';
		output[theIndex + 3] = (i + 2) < length ? table[(value >> 0)  & 0x3F] : '=';
	}
	return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];
}

-(WebApiNewApi*)createWebApiNewApi
{
	WebApiNewApi *result = [[WebApiNewApi alloc] initWithManager:self];
	return result;
}
-(WebApiNewApi2*)createWebApiNewApi2
{
	WebApiNewApi2 *result = [[WebApiNewApi2 alloc] initWithManager:self];
	return result;
}

-(void)startReqest:(NSMutableURLRequest*)request withCompletion:(void (^)(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase * error))completion
{
	if((self.authorizationName != nil) && (self.authorizationPassword != nil)){
		NSString *authenticationString = [NSString stringWithFormat:@"%@:%@", self.authorizationName, self.authorizationPassword];
		NSString *authenticationValue = [self base64forData:[authenticationString dataUsingEncoding:NSASCIIStringEncoding]];
		[request setValue:[NSString stringWithFormat:@"Basic %@", authenticationValue] forHTTPHeaderField:@"Authorization"];
	}
	request.timeoutInterval = self.timeout;

	NSURLSession *session = [NSURLSession sharedSession];
	NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
		WebApiBriostackErrorBase *errorApi = nil;
		if(error != nil){
			errorApi = [[WebApiBriostackErrorBase alloc] initWithResponse:response];
			errorApi.error = error;
		}
		completion(data, (NSHTTPURLResponse*)response, errorApi);
	}];
	[task resume];
}

-(instancetype)init
{
	self = [super init];
	if(self){

	}
	return self;
}

@end
