//
// WebApiNewApi.h
// Briostack 1.0
//
// Generated by ApiGenerator on Wednesday, March 13, 2024
//

#import "WebApiNewApi.h"

@implementation WebApiNewApi

-(void)loginServiceWithCompletion:(void(^)(NSData* result, WebApiBriostackErrorBase *error))completion
{
	NSError *error = nil;
	NSString *partUrl = [NSString stringWithFormat:@"https://pestproridall.briostack.com/api/loginService?globalVariable=%@", WebApiBriostackbase64EncodeData(self.manager.globalVariable)];
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:partUrl]];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:willPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager willPrepareRequest:request];

	[request setHTTPMethod:@"POST"];

	[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:didPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager didPrepareRequest:request];

	[self.manager startReqest:request withCompletion:^(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase *error) {
		if(error == nil){
			WebApiBriostackErrorBase *erroeResult = nil;
			NSError *errorJson = nil;
			NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:result options:0 error:&errorJson];
			if(errorJson != nil){
				erroeResult = [[WebApiBriostackErrorBase alloc] init];
				error.error = errorJson;
				completion(nil, erroeResult);
				return;
			}
	NSData *res = WebApiBriostackbase64DecodeString(dic[@"value"]);
			completion(res, error);
		}else completion(nil, error);
	}];
}

-(void)logOutWithLogOut:(NSDate*)logOut withCompletion:(void(^)(NSData* result, WebApiBriostackErrorBase *error))completion
{
	NSString *partUrl = [NSString stringWithFormat:@"https://pestproridall.briostack.com/api/logOut?globalVariable=%@", WebApiBriostackbase64EncodeData(self.manager.globalVariable)];
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:partUrl]];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:willPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager willPrepareRequest:request];

	[request setHTTPMethod:@"POST"];

	NSString *content = [NSString stringWithFormat:@"logOut=%@", [NSNumber numberWithLong:[logOut timeIntervalSince1970]]];
	[request setHTTPBody:[content dataUsingEncoding:NSUTF8StringEncoding]];


	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:didPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager didPrepareRequest:request];

	[self.manager startReqest:request withCompletion:^(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase *error) {
		if(error == nil){
			WebApiBriostackErrorBase *erroeResult = nil;
			NSError *errorJson = nil;
			NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:result options:0 error:&errorJson];
			if(errorJson != nil){
				erroeResult = [[WebApiBriostackErrorBase alloc] init];
				error.error = errorJson;
				completion(nil, erroeResult);
				return;
			}
	NSData *res = WebApiBriostackbase64DecodeString(dic[@"value"]);
			completion(res, error);
		}else completion(nil, error);
	}];
}

-(void)ErrorsWithCompletion:(void(^)(WebApiBriostackErrorBase *error))completion
{
	NSString *partUrl = [NSString stringWithFormat:@"/?globalVariable=%@", WebApiBriostackbase64EncodeData(self.manager.globalVariable)];
	NSString *url = self.manager.baseURL;
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:[url stringByAppendingString:partUrl]]];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:willPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager willPrepareRequest:request];

	[request setHTTPMethod:@"POST"];


	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:didPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager didPrepareRequest:request];

	[self.manager startReqest:request withCompletion:^(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase *error) {
		completion(error);
	}];
}

-(void)getActiveWorkareasWithGetActiveWorkArea:(WebApiNewData*)getActiveWorkArea withCompletion:(void(^)(NSData* result, WebApiBriostackErrorBase *error))completion
{
	NSString *partUrl = [NSString stringWithFormat:@"https://pestproridall.briostack.com/api/getActiveWorkAreas?globalVariable=%@", WebApiBriostackbase64EncodeData(self.manager.globalVariable)];
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:partUrl]];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:willPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager willPrepareRequest:request];

	[request setHTTPMethod:@"POST"];

	NSMutableString *content = [NSMutableString stringWithString:@""];
	BOOL wasFirstPOST = NO;
	NSString *tmpStr = WebApiBriostackObjectToPost([getActiveWorkArea save], @"getActiveWorkArea");
	if(tmpStr.length > 0){
		if(wasFirstPOST == NO)
			wasFirstPOST = YES;
		else [content appendString:@"&"];
		[content appendString:tmpStr];
	}

	[request setHTTPBody:[content dataUsingEncoding:NSUTF8StringEncoding]];


	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:didPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager didPrepareRequest:request];

	[self.manager startReqest:request withCompletion:^(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase *error) {
		if(error == nil){
			WebApiBriostackErrorBase *erroeResult = nil;
			NSError *errorJson = nil;
			NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:result options:0 error:&errorJson];
			if(errorJson != nil){
				erroeResult = [[WebApiBriostackErrorBase alloc] init];
				error.error = errorJson;
				completion(nil, erroeResult);
				return;
			}
	NSData *res = WebApiBriostackbase64DecodeString(dic[@"value"]);
			completion(res, error);
		}else completion(nil, error);
	}];
}

-(void)getAutoPayReportWithGetAutoPayReport:(WebApiNewData*)getAutoPayReport withCompletion:(void(^)(NSData* result, WebApiBriostackErrorBase *error))completion
{
	NSString *partUrl = [NSString stringWithFormat:@"https://pestproridall.briostack.com/api/getAutoPayReport?globalVariable=%@", WebApiBriostackbase64EncodeData(self.manager.globalVariable)];
	NSMutableURLRequest *request = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:partUrl]];

	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:willPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager willPrepareRequest:request];

	[request setHTTPMethod:@"POST"];

	NSMutableString *content = [NSMutableString stringWithString:@""];
	BOOL wasFirstPOST = NO;
	NSString *tmpStr = WebApiBriostackObjectToPost([getAutoPayReport save], @"getAutoPayReport");
	if(tmpStr.length > 0){
		if(wasFirstPOST == NO)
			wasFirstPOST = YES;
		else [content appendString:@"&"];
		[content appendString:tmpStr];
	}

	[request setHTTPBody:[content dataUsingEncoding:NSUTF8StringEncoding]];


	if([self.manager.delegate respondsToSelector:@selector(WebApiBriostackManager:didPrepareRequest:)] == YES)
		[self.manager.delegate WebApiBriostackManager:self.manager didPrepareRequest:request];

	[self.manager startReqest:request withCompletion:^(NSData *result, NSHTTPURLResponse *response, WebApiBriostackErrorBase *error) {
		if(error == nil){
			WebApiBriostackErrorBase *erroeResult = nil;
			NSError *errorJson = nil;
			NSDictionary *dic = [NSJSONSerialization JSONObjectWithData:result options:0 error:&errorJson];
			if(errorJson != nil){
				erroeResult = [[WebApiBriostackErrorBase alloc] init];
				error.error = errorJson;
				completion(nil, erroeResult);
				return;
			}
	NSData *res = WebApiBriostackbase64DecodeString(dic[@"value"]);
			completion(res, error);
		}else completion(nil, error);
	}];
}


@end
